environ

 vocabularies SUBSET_1, NUMBERS, XBOOLE_0, FUNCOP_1, FUNCT_2, RELAT_1, TARSKI,
      FINSEQ_1, CARD_3, FUNCT_1, ZFMISC_1, ORDINAL4, CARD_1, XBOOLEAN,
      MARGREL1, PARTFUN1, NAT_1, UNIALG_1, FINSEQ_2, UNIALG_2, LEIBNIZ, ARYTM_3, XXREAL_0, ZF_MODEL;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, NUMBERS, FUNCT_1, RELAT_1,
      NAT_1, RELSET_1, FUNCT_2, XBOOLEAN, MARGREL1, CARD_3, FINSEQ_1, FINSEQ_2, FUNCOP_1, PARTFUN1;
 constructors FUNCOP_1, XCMPLX_0, FINSEQ_1, XBOOLEAN, RELSET_1, CARD_3,
      FINSEQ_2, MARGREL1;
 registrations XBOOLE_0, SUBSET_1, RELAT_1, FUNCT_1, XBOOLEAN, FINSEQ_1,
      FINSEQ_2, ORDINAL1, RELSET_1, PARTFUN1, FUNCOP_1, XXREAL_0, CARD_1,
      CARD_3, MARGREL1;
 requirements SUBSET, BOOLE, ARITHM;
 definitions TARSKI, XBOOLE_0, XBOOLEAN, FINSEQ_1, CARD_3, FUNCT_1, FUNCOP_1, MARGREL1;
 theorems TARSKI, ZFMISC_1, FINSEQ_1, FUNCT_2, FUNCOP_1, XBOOLE_0, XBOOLE_1,
      XBOOLEAN, FUNCT_1, CARD_3, FINSEQ_3, RELAT_1, RELSET_1, PARTFUN1,
      ORDINAL1, FINSEQ_2, MARGREL1;
 schemes XBOOLE_0, FUNCT_1;


begin

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::: Leibniz concept models
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

definition
  struct (ObjectTheoryModel) LeibnizConceptModel
  (# objects -> non empty set,
     points -> non empty set,
     propositions -> non empty set,
     properties -> non empty set,
     exemplificationRelation -> Relation of [: the properties, the objects :],
                                            the points,
    encodingRelation -> Relation of [:the objects, the properties:],
                                     the points,
    trueAtRelation -> Function of the propositions, the points,
    distinguishedPoint -> Element of the points,
    concreteObjects -> Subset of [: the objects, the points :],
    VAC -> Relation of the propositions, the properties, :: might be a relation
    PLUG -> Relation of the properties, the objects,
    entailsRelation -> Relation of the objects, the objects #);
end;

notation
  let M be LeibnizConceptModel,
      x be Object of M;
  synonym x is concept for x is abstract;
end;

registration
  let M be LeibnizConceptModel;
  cluster abstract for Object of M;
  existence;
end;

definition
  let M be LeibnizConceptModel;
  mode Concept of M is abstract Object of M;
  correctness;
end;

definition
  let M be LeibnizConceptModel;
  redefine mode Property of M -> Concept of M;
  coherence;
end;

:: strong material conditional in terms of exemplification formula

definition
  let M be LeibnizConceptModel;
  let c be Concept of M;
  let d be Concept of M;
  pred
    c entails d
  means
    :DefEntails:
    [c,d] in the entailsRelation of M;
end;

reserve M for LeibnizConceptModel,
        x, y, z, u for Concept of M,
        F, G, H for Property of M;

theorem Theorem1Modal:
for d being Point of M holds x,x are_equal_at d
proof
  let d be Point of M;
  per cases;
  suppose A1: x is abstract;
    then x =A x;
    hence thesis by DefAreEqualAt;
  end;
  suppose A2: x is ordinary;
    hence thesis;
  end;
end;

theorem Theorem1Distinguished:
x is_equal_to x
proof
  x,x are_equal_at w_alpha(M) by Theorem1Modal;
  hence thesis by DefIsEqualTo;
end;

theorem Theorem2Modal:
for d being Point of M st x,y are_equal_at d holds y,x are_equal_at d
proof
  let d be Point of M such that A1: x,y are_equal_at d;
   per cases by
   suppose C1: x =A y;
     hence thesis;
   end;
   suppose C2: y =E y;

theorem Theorem2Distinguished:
x is_equal_to y implies y is_equal_to x
proof
  assume x is_equal_to y;
  then x,y are_equal_at w_alpha(M) by DefIsEqualTo;
  then y,x are_equal_at w_alpha(M) by Theorem2Modal;
  hence thesis by DefIsEqualTo;
end;

theorem Theorem3:
(x is_equal_to y & y is_equal_to z) implies x is_equal_to z;

:: The concept-of operator
definition
  let M be LeibnizConceptModel;
  let G be Property of M;
  func
    concept_of(G) -> Concept of M
  means
    :DefConceptOf:
    for F being Property of M holds (it encodes F iff G entails F);
  existence;
  uniqueness;
end;

:: Concept sum
definition
  let M be LeibnizConceptModel,
      x, y be Concept of M;
  func
    x + y -> Concept of M
  means
    :DefConceptSum:
    for F being Property of M
     holds it encodes F iff (x encodes F or y encodes F);
  existence;
  uniqueness;
end;

theorem Theorem4Part1:
concept_of(G) + concept_of(H) is Concept of M; :: obvious

theorem Theorem4Part2:
(concept_of(G) + concept_of(H)) encodes F implies (G entails F or H entails F)
proof
  set cG = concept_of(G);
  set cH = concept_of(H);
  set S = cG + cH;
  thus S encodes F implies (G entails F or H entails F)
  proof
    assume A1: S encodes F;
    then for F being Property of M
      holds S encodes F iff (cG encodes F or cH encodes F) by DefConceptSum;
    then S encodes F iff (cG encodes F or cH encodes F);
    then cG encodes F or cH encodes F by A1;
    then per cases;
    suppose cG encodes F;
      then G entails F by DefConceptOf;
      hence thesis;
    end;
    suppose cH encodes F;
      then H entails F by DefConceptOf;
      hence thesis;
    end;
  end;
end;

theorem Theorem4Part3:
(G entails F or H entails F) implies (concept_of(G) + concept_of(H)) encodes F
proof
  set cG = concept_of(G);
  set cH = concept_of(H);
  assume A1: G entails F or H entails F;
  then per cases;
  suppose G entails F;
    then cG encodes F by DefConceptOf;
    hence thesis by DefConceptSum;
  end;
  suppose H entails F;
    then cH encodes F by DefConceptOf;
    hence thesis by DefConceptSum;
  end;
end;

theorem Theorem4Part4:
(concept_of(G) + concept_of(H)) encodes F iff (G entails F or H entails F)
  by Theorem4Part2,Theorem4Part3;


theorem Theorem4Part5:
(for F being Property of M holds (x encodes F iff (G entails F or H entails F)))
  implies (x = concept_of(G) + concept_of(H))
proof
  set cG = concept_of(G);
  set cH = concept_of(H);
  set S = cG + cH;
  assume A1: for F being Property of M
               holds (x encodes F iff G entails F or H entails F);
  A2: for F being Property of M holds (x encodes F iff S encodes F)
  proof
    let F be Property of M;
    B1: x encodes F iff (G entails F or H entails F) by A1;
    S encodes F iff (G entails F or H entails F) by Theorem4Part4;
    hence thesis by B1;
  end;
  thus thesis from Principle6(A2);
end;

theorem Theorem5:
x + x = x;

theorem Theorem6:
x + y = y + x;

theorem Theorem7:
x + (y + z) = (x + y) + z;

:: Theorem 8 is a scheme.  One could represent this, by treating + as
:: an operation that takes finite sequences of concepts as arguments,
:: but in the interst of getting on to more interesting stuff, let's
:: skip it.

            theorem Theorem9:
x = y implies for z holds (x + z = y + z); :: obvious

theorem Theorem10:
x = y & z = u implies x + z = y + u; :: obvious

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::: Concept inclusion and containment
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

definition
  let M be LeibnizConceptModel,
      x, y be Concept of M;
  pred
    x <= y
  means
    :DefConceptInclusion:
    for F being Property of M holds (x encodes F implies y encodes F);
  reflexivity; :: Theorem 11i
end;

notation
  let M be LeibnizConceptModel,
      x, y be Concept of M;
  synonym y >= x for x <= y;
end;

theorem Theorem11i:
x <= x; :: restatement of reflexivity of <=

theorem Theorem11c:
x >= x; :: obvious, in light of the reflexivity of <= and the definition of >=

theorem Theorem12i:
x <= y implies (x <> y implies not (y <= x));

theorem Theorem12c:
x >= y implies (x <> y implies not (y >= x)) by Theorem12i;

theorem Theorem13i:
x <= y & y <= z implies x <= z;

theorem Theorem13c:
x >= y & y >= z implies x >= z;

theorem Theorem14i:
x <= y & y <= x implies x = y;

theorem Theorem14c:
x >= y & y >= x implies x = y by Theorem14i;

theorem Theorem15i:
(for z holds (z <= x iff z <= y)) implies x = y;

theorem Theorem15c:
(for z holds (z >= x iff z >= y)) implies x = y;

